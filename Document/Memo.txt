KScriptWin
KScriptをWPFで動作させる環境の作成とWindows用関数の追加

プログラムソースの構成
    MainWindow                              動作環境(エディタなど)
        KScript                             スクリプト解析処理本体
            KParse                          構文解析
            KLexer                          字句解析
            KScriptLib                      スクリプトの関数
                GraphView                   グラフィック表示ダイヤログ
                    GraphDraw               プロット,グラフ処理
                        Entity              表示要素
                        YWorldDraw(CoreLib) 2Dグラフィック処理
            YCalc.express(CoreLib)          数値計算処理
            YLib(CoreLib)                   汎用関数ライブラリ
        AvalonEditor(NuGet)                 エディタ本体
        RingBuffer                          出力表示用汎用リングバッファ

ConsoleからWPFに変更
・スクリプトの編集にAvalonEditor を使用
・print文の出力を callback 関数を使って実行側で出力先を設定できるようにした
・print文の出力先はEditBoxにして間に RingBuffer を入れて出力

Editorの機能(AvalonEditor)
・行番号 (既存機能)
・ハイライト表示(SyntaxHighlighting=""C#"") (既存機能)
・ファイルのロードセーブ (2024/09/29)
・フォントの拡大縮小 (22024/09/29)
・テキストの変更確認(テキストのハッシュ値を保存して比較) (2024/09/29)
・フォントの種類の変更 (2024/09/30)
・検索・置換え (検索のみ 2024/09/30)
・関数名や定数の入力候補機能(コードスニペット snippets) Apps/F8キー (2024/10/10)
・タブをスペースに変換
・ユーザー関数の入力候補

KScriptの特徴
・インタプリタであること
・記述は C に近く、文法はシンプルでわかりやすい
・変数、配列の宣言は不要
・変数で数字との文字列の区別をしない
・配列は２次元まで
・配列の値に数値と文字列の混在か可能
・配列のインデックスに文字列か使用できる
・変数名、配列名、配列のインデックスに日本語が使用できる
・グローバル変数とローカル変数を名前の指定で使い分けられる
・#include文で関数の汎用化ができる

KScriptWinの特徴
・コーディング(エディタ)と実行環境がセットとなっている
・同じ環境でテキストファイルの参照ができコーディングの参考にできる
・エディタでは関数名などを入力候補から選択できる
・おなじ環境でグラフィック機能が使える
・グラフィック機能が簡単に使用できる(直接ワールド座標が使えスクリーン座標を考慮する必要がない)


Win版用の関数
    a = inputBox(title);                    文字入力ダイヤログ
    messageBox(outString[, title]);         文字列のダイヤログ表示
    plot関数(2Dグラフィック)
        plot.WindowSet(left,bottom,right,top);   表示領域の設定
        plot.Aspect(1);                          アスペクト比固定の設定(0(非固定)/1(固定))
        plot.Color("Blue");                      要素の色設定
        plot.PointType("cross");                 点種の設定("dot", "cross", "plus", "box", "circle", "triangle")
        plot.LineType("dash");                   線種の設定("solid", "dash", "center", "phantom")
        plot.PointSize(3);                       点サイズの設定
        plot.LineThickness(2);                   線の太さの設定
        plot.Point(x, y);                        点の表示
        plot.Line(sx, sy, ex, ey);               線分の表示(始点x,y、終点x,y)
        plot.Arc(cx, cy, r[, sa][, ea]);         円弧の表示(中心x,中心y,半径[,始角[,終角]])
        plot.Text(text,x,y,size,rotate,ha,va);   文字列表示(文字列,座標[,大きさ[,回転角[,水平アライメント[,垂直アライメント]]]])
    plot3D関数(3Dグラフィック)
        plot3D.setArea(min[],max[]);             3DViewの初期化",
        plot3D.setAxisFrame(axis,frame);         軸とフレームの表示(0:非表示/1:表示)",
        plot3D.disp();                           要素の表示",
        plot3D.setColor(\"Blue\");               色の設定",
        plot3D.plotTranslate(vec[]);             要素の移動(移動量 vec[x/y/z])",
        plot3D.plotRotate(angle,\"X\");          要素の回転(回転角度,回転軸 X/Y/Z軸)",
        plot3D.plotScale(scale[]);               要素の縮小拡大 (拡大率 scale[x/y/z])",
        plot3D.plotReset();                      座標変換をクリアする",
        plot3D.plotLine(sp[x/y/z],ep[x/y/z]);    線分の設定()",
        plot3D.plotLines(plist[n,x/y/z]);        複数線分(plits[,])",
        plot3D.plotPolyline(plist[n,x/y/z]);     ポリライン",
        plot3D.plotPolyloop(plist[n,x/y/z]);     ポリラインループ",
        plot3D.plotPolygon(plist[n,x/y/z]);　    ポリゴン(塗潰し)",
        plot3D.plotTrianges(plist[n,x/y/z]);     複数三角形(塗潰し)",
        plot3D.plotTriangeStrip(plist[n,x/y/z]); 連続三角形",
        plot3D.plotQuads(plist[n,x/y/z]);        複数四角形",
        plot3D.plotQuadeStrip(plist[n,x/y/z]);   連続四角形",
        plot3D.plotTriangeFan(plist[n,x/y/z]);   扇形の連続三角形",
        plot3D.translate(pos[],vec[]);           3D座標の移動(3D座標,移動量)",
        plot3D.rotate(pos[],cp[],angle,face);    3D座標の回転(3D座標,回転中心,回転角,回転軸)",
        plot3D.scale(pos[],cp[],scale);          3D座標の拡大縮小(3D座標,拡大中心,拡大率)",
        plot3D.holePlateQuads(outline[,],innerLine[,],,);   中抜きの平面データの作成",
        plot3D.polygonSideQuadStrip(polygon[,],thicknes);   ポリゴンの側面データをQuadStripで作成",

ScriptLibの追加関数の引数の処理方法
    配列以外の引数は値で渡す
    //  配列以外の引数 messageBox("メッセージ" [, title])
    public void messageBox(Token args) {
        //  , で複数の引数に分解
        List<string> listArg = mLexer.commaSplit(args.mValue);
        //  引数ごとに変数や数式を処理して文字列にする
        List<string> datas = new List<string>();
        for (int i = 0; i < listArg.Count; i++)
            datas.Add(getValueToken(listArg[i]).mValue);
        //  必要に応じて文字列を数値に変換
        double b = ylib.doubleParse(datas[0]);

    //  配列の場合 a = sum(x[]);  a = sum(y[,]);  
    public Token sum(Token arg)　{
        //  配列名と配列の次元を求める
        (string arrayName, int no) = getArrayName(arg);
        List<double> listData = new();
        if (no == 1 || no == 2) {
            //  配列を数値配列に変換
            listData = cnvListDouble(arg);
        } else
            return new Token(arrayName, TokenType.ERROR);
        double sum = listData.Sum();
        return new Token(sum.ToString(), TokenType.LITERAL);
    }
    //  配列の場合  graphSet(x[], y[] [,title]);
    public void graphSet(Token args) {
        List<string> listArg = mLexer.commaSplit(args.mValue);
        if (listArg.Count < 2)
            return ;
        List<double> x = cnvListDouble(new Token(listArg[0], TokenType.ARRAY));
        List<double> y = cnvListDouble(new Token(listArg[1], TokenType.ARRAY));
        if (x.Count != y.Count)
            return ;
        string title = "";
        if (2 < listArg.Count)
            title = getValueToken(listArg[2]).mValue.Trim('"');

変数から値の取得
    a = 2; b = a; b = a- 1;
    b = c[1]; b = c[a]; b = c[a -2]; b = d[c[1]]; b = d[c[a]]; b = c["string"];
    b = e[1, 2]; b = e[a, 1]; b = e[a - 1,1];

    value = getVariableValue(Token variable)
        value = variable.TokenType.LITERAL
                                   STRING
                                   VARIABLE   ←　mParse.getVriable()
                                   ARRAY      ← Index ←  variables, array

機能追加
・多次元配列対応(インデックスなしの場合) 3次元以上  a[,,],a[,,,] ...の時
・2Dグラフィック: plotXXXXX() (2024/10/06)
・追加グラフィック関数 plotRect(),plotPolyline(a[,]),plotPolygon(a[,]),plotFIllColor()
・グラフ機能 散布図,(折線,棒グラフ)
・3Dグラフィック  回転体の作成
・ダイヤログ関数(xxxDlg関数) input,message (2024/10/06) menuSlelct
・システム設定(フォントファミリ・サイズ、)
・条件文の true/false は現状は 数値/!数値 で対応
・swtch文、do while()
・ファイルの読込保存 a=loadText(), saveText(a),a[]=loadLine(),saveLine(a[]),a[,]=loadCsv(),savCsv(a[,]);
・数値: format/toString,
・時刻・時間関数: startTime,lapTime,dateTimeNow (2024/10/24)
・乱数()
・配列関数: copy, add, insert, find, findAll, findIndex, findLast,findLastIndex,
            indexOf, lastIndexOf
・文字列関数: char取出, substring,replace,insert,remove,trim,toString,length,indexof,join,split,compare
・数式: 4元数, 最小二乗法,多変量解析

・pause の追加 pause("message"); (2024/11/17)
・exit を例外処理(throw)で組み込む (2024/10/23)
・グローバル変数は変数名の先頭に「g_」をつけることで対応 (2024/10/20)
・他のソースの参照機能　(2024/10/13)
・else if のサポート (2024/10/18)
・エディタで選択行のコメント追加/解除 (2024/10/24)
・エディタでのタブ・スペース変換(2024/11/03)
・数式: 3次/4次関数追加(2024/11/03)
・配列関数(array.): contains, count, clear, remove, squeez, sort, reverse, 
    統計 max, min, sum, average, variance, stdDeviation, covariance, corrCoeff (2024/10/20)
    マトリックス関数(matrix.): unit,transpose,multi, add, inverse, copy

機能制限
・関数は値渡しのみでアドレス渡しは不可

問題点
・代入文で演算の優先順位がつけられず左から処理される (20024/10/23)
・有効桁の末尾の誤差のまるめが必要 (roundRound関数をスクリプトで作成 2024/11/02)
・デリミタのつけ忘れの対応(例外処理?)
・println("DEG(atan2 = ", DEG(atan2(1,1))); ← string内の括弧が認識される (2024/10/23)
・グラフィックウィンドウのクローズができない
・コメント追加/解除するとundoがリセットされる (2024/10/23 AvalonEditor.Documentで対応)

■開発環境
開発ソフト : Microsoft Visual Studio 2022  
開発言語　 : C# 10.0 Windows アプリケーション  
フレームワーク　:  .NET 8.0
NuGetライブラリ : AvalonEditor
自作ライブラリ  : CoreLib (YCalc,YWordDraw,YDraw,InputBox,MenuDialog)


履歴
2024/12/01 array.add()関数追加
2024/11/28 plot3D.holePlateQuads(),polygonSideQuadStrip()関数を追加
2024/11/17 pause();ステートメント追加
2024/11/10 関数名の表記を分類+関数名とした(分類: array,solve,plot,plot3D)
2024/11/10 3Dグラフィック機能追加(plot3D.xxxx)
2024/11/06 拡張関数名の変更 plotXXXX → plot.XXXX
2024/11/03 参照ファイルのファイル操作を追加、タブをスペースに変換を追加
2024/11/02 #include のファイルの関数をsnippet 表示できるように改善
2024/10/24 コメント追加/解除(ctrl+/)
2024/10/23 exit を例外処理(throw)で組み込む 
2024/10/20 グローバル変数は変数名の先頭に「g_」をつけることで対応
2024/10/13 ファイル参照機能
2024/10/10 エディタでの入力候補機能
2024/10/06 グラフィック関数
2024/10/06 ダイヤログ関数 (input,message)
2024/10/04 中断、一時停止機能
2024/09/30 エディタのフォント選択、検索、
2024/09/29 スクリプトの作成にAvalonEditorを使用,print文をコールバック関数にして実行側で出力先を選択
2024/09/27 Console版から移植で作成開始



echo "# KScriptWin" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/katsushigeyoshida/KScriptWin.git
git push -u origin main
